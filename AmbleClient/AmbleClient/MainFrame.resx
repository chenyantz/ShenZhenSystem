<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="menuStrip1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAMAEBAQAAEABAAoAQAANgAAABAQAAABAAgAaAUAAF4BAAAQEAAAAQAgAGgEAADGBgAAKAAAABAA
        AAAgAAAAAQAEAAAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/09MAiXCYAMSOigDaxc4AlpTKAD+I
        7wALDpgAzKKnAChm8wBhf9QAFkLNADA4pwADJ+EAECG4ABQeoQAAAAAAAa/FAAAAAAAKe+cAAAAAAKe2
        bqAAAAAFe2neUAAAAFfGneoAAAAAz2adwAAAAAV2adwAAAAABcmd4AAAAAADKt5QAAAAADOIpQAAAACC
        OAAAAAAACCOIAAAAAAADgYgAAAAAAAMRAAAAAAAACIAAAAAAAAAAAAAAAAAAAP+DAAD/gwAA/wEAAP4B
        AAD8AwAA/AcAAPgPAAD4HwAA+B8AAPA/AADD/wAAg/8AAIP/AACP/wAAn/8AAP//AAAoAAAAEAAAACAA
        AAABAAgAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAP/T0wBbVrcANXDvAKZ7ewC4iooA16CfAHl0
        vABPnOwAOjiiACQfmQAcLrQATZLxAPPU1QDLtrcAnprJAJCQygAyffQAFDm4ABcRkwC7kKQAKDSkAAAX
        zgBYWMgAAgHDABhO9AALIaEABTDhAMB9dgCsdHMAmGlrAAAClgAAIu0A1KaoAJSNyAAjSr0AmJbNADh5
        2wDQs7QADRGaAPbO0ABDj/QACC6vAA4UlQAxMKIAfnzBACdu9ACeb4gAr4J7ANSdnABubLoA0KmoAAQu
        4wDepKYAADD0AAAOoACfZ2gAuHl5ANCbnAASTfQABBasACJl9AAWJLQAcnC/AAws1AAgQK0Aw6mrABUU
        lQAhS7sANH/0AI+OzQCfncsAsa/WAOfn7wBNnfQAFibBACUurQA/P68AT5/0AJiOsgDtppEAvZudAKyD
        hAAzbvQAYV+5AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEk/CgkQAAAAAAAAAAAAAAAy
        HxIqJwAAAAAAAAAAAAAtKyNOETwHAAAAAAAAAAAiQ0QpPSBLRwAAAAAAAABIE0EMLjYYAgAAAAAAAAAA
        LBoIRTsWTQAAAAAAAAAARjclShkbTAAAAAAAAAAAAE8VA1M0CwAAAAAAAAAAAAAwLxdAPg8AAAAAAAAA
        AAAEHFAUVCQAAAAAAAAAAEIeHTUAAAAAAAAAAAAAAA44OTEhAAAAAAAAAAAAAABSOgEGUQAAAAAAAAAA
        AAAABQ0oAAAAAAAAAAAAAAAAACYzAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/gwAA/4MAAP8B
        AAD+AQAA/AMAAPwHAAD4DwAA+B8AAPgfAADwPwAAw/8AAIP/AACD/wAAj/8AAJ//AAD//wAAKAAAABAA
        AAAgAAAAAQAgAAAAAABABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA+vbzBufn7/9ycL//JB+Z/zo4ov+QkMr/6OftFfTx8AMAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA+vn0BgAAAABubLr/AAKW/xQ5uP8ILq//DRGa/6yo1G8AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA/fn0DAAAAAB+fMH/DhSV/yNKvf9Pn/T/Mn30/wQWrP95dLy6AAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAPv59AaUjcj/FRSV/yFLu/9Dj/T/ImX0/wAi7f8WJsH/n53LgQAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP359Ayxr9aaFxGT/yBArf9NkvH/J270/wAw9P8CAcP/W1a359fU4S0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADNzeJHMTCi/wshof9PnOz/NH/0/xJN9P8AF87/Pz+v/9PR3jMAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAj47N/wAOoP84edv/TZ30/xhO9P8FMOH/JS6t/8O82E4AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAJiOsv8oNKT/NXDv/zNu9P8ELuP/HC60/7Otz2MAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAA+fn0BtrLy02vgnv/nm+I/1hYyP8MLNT/FiS0/56ayYQAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAN7Q0jume3v/wH12/+2mkf+7kKSQYV+53piWzY0AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMOpq6yYaWv/rHRz/96kpv/TrKtm7dzTJAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAMu2t4ifZ2j/uHl5/9SdnP/Upqj/0cjJPAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACsg4T/0Juc///T0//XoJ//vZudfuzs7Q8AAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAuIqK//PU1f/2ztD/zqCheNjMzTYAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAANCztP/Qqaj/0q6uY+DP0TAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAD/gwAA/4MAAP8BAAD+AQAA/AMAAPwH
        AAD4DwAA+B8AAPgfAADwPwAAw/8AAIP/AACD/wAAj/8AAJ//AAD//wAA
</value>
  </data>
</root>