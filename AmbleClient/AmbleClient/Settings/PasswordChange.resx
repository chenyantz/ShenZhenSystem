<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>